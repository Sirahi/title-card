{
  uniforms: {
    iTime: {
      value: null,
      needsUpdate: true,
    },
    iResolution: {
      value: null,
      needsUpdate: true,
    },
  },
  vertexShader: `\
    precision highp float;
    precision highp int;

    uniform vec2 iResolution;
    varying vec2 vUv;

    void main() {
      gl_Position = vec4(position.x, position.y, -0.99, 1.);

      vUv = position.xy;
      vUv.y *= iResolution.y/iResolution.x;
    }
  `,
  fragmentShader: `\
    precision highp float;
    precision highp int;

    uniform float iTime;

    varying vec2 vUv;
    
    vec2 rotateCCW(vec2 pos, float angle) { 
      float ca = cos(angle),  sa = sin(angle);
      return pos * mat2(ca, sa, -sa, ca);  
    }
    
    vec2 rotateCCW(vec2 pos, vec2 around, float angle) { 
      pos -= around;
      pos = rotateCCW(pos, angle);
      pos += around;
      return pos;
    }

    // return 1 if v inside the box, return 0 otherwise
    bool insideAABB(vec2 v, vec2 bottomLeft, vec2 topRight) {
        vec2 s = step(bottomLeft, v) - step(topRight, v);
        return s.x * s.y > 0.;   
    }

    bool isPointInTriangle(vec2 point, vec2 a, vec2 b, vec2 c) {
      vec2 v0 = c - a;
      vec2 v1 = b - a;
      vec2 v2 = point - a;

      float dot00 = dot(v0, v0);
      float dot01 = dot(v0, v1);
      float dot02 = dot(v0, v2);
      float dot11 = dot(v1, v1);
      float dot12 = dot(v1, v2);

      float invDenom = 1. / (dot00 * dot11 - dot01 * dot01);
      float u = (dot11 * dot02 - dot01 * dot12) * invDenom;
      float v = (dot00 * dot12 - dot01 * dot02) * invDenom;

      return (u >= 0.) && (v >= 0.) && (u + v < 1.);
    }

    const float timeFactor = 5.0;
    const float animTime = 6.0;

    vec4 createArrow(vec2 pos, float width, float height, vec3 arrowColor, vec4 color) {
        // root
        float f = mod(iTime * timeFactor, animTime);
        f = min(1.49, f);
        
        float angle = -0.78;

        vec2 dimL = vec2(width, height);
        vec2 dimR = vec2(height, width);

        vec2 pivot = (vec2(dimL.x, dimR.y) / 2.);
        
        pos -= pivot;
        pivot += pos;

        vec2 bottomLeft = pos;
        vec2 topRight = bottomLeft + dimL;
        // derived
        vec2 bottomRight = vec2(topRight.x, bottomLeft.y);
        vec2 topLeft = vec2(bottomLeft.x, topRight.y);

        bottomLeft = rotateCCW(bottomLeft, pivot, angle);
        topRight = rotateCCW(topRight, pivot, angle);
        bottomRight = rotateCCW(bottomRight, pivot, angle);
        topLeft = rotateCCW(topLeft, pivot, angle);

        bottomLeft.y -= f;
        topRight.y -= f;
        bottomRight.y -= f;
        topLeft.y -= f;

        if (
          isPointInTriangle(vUv, bottomLeft, bottomRight, topRight) ||
          isPointInTriangle(vUv, bottomLeft, topLeft, topRight)
        ) {
          color.rgb = arrowColor;
          color.a = 1.;
        }

        bottomLeft = pos;
        topRight = bottomLeft + dimR;

        // derived
        bottomRight = vec2(topRight.x, bottomLeft.y);
        topLeft = vec2(bottomLeft.x, topRight.y);

        bottomLeft = rotateCCW(bottomLeft, pivot, angle);
        topRight = rotateCCW(topRight, pivot, angle);
        bottomRight = rotateCCW(bottomRight, pivot, angle);
        topLeft = rotateCCW(topLeft, pivot, angle);

        bottomLeft.y -= f;
        topRight.y -= f;
        bottomRight.y -= f;
        topLeft.y -= f;

        if (
          isPointInTriangle(vUv, bottomLeft, bottomRight, topRight) ||
          isPointInTriangle(vUv, bottomLeft, topLeft, topRight)
        ) {
          color.rgb = arrowColor;
          color.a = 1.;
        }

        return color;
    }

    void main() {
      vec4 color = vec4(0.);
      {
        // root
        float f = mod(iTime * timeFactor, animTime);

        f = min(1.49, f);
        
        //// black part
        vec2 bottomLeftb = vec2(-0.7, 1.3 - f);
        vec2 topRightb = vec2(-0.5, 1.5 - f);
        // derived
        float width = topRightb.x - bottomLeftb.x;
        vec2 bottomRight = bottomLeftb + vec2(width, 0.);
        vec2 center = bottomLeftb + vec2(width/2., 0.);
        vec2 tipLeft = bottomLeftb + vec2(0., -0.08);
        vec2 tipRight = bottomRight + vec2(0., -0.08);
        if (
          insideAABB(vUv, bottomLeftb, topRightb)
        ) {
          color.a = 1.;
        }
        if (
          isPointInTriangle(vUv, bottomLeftb, tipLeft, center) ||
          isPointInTriangle(vUv, bottomRight, tipRight, center)
        ) {
          color.a = 1.;
        }
        
        //// color part
        vec2 bottomLeft = vec2(-0.7, 1.5 - f);
        vec2 topRight = vec2(-0.5, 1.75 - f);
        if (
          insideAABB(vUv, bottomLeft, topRight)
        ) {
          float center = (topRight.y + bottomLeft.y) / 2.;
          float dist = clamp((center + 0.1) - vUv.y, 0., 1.);
          color.rgb = vec3(0., 1., 0.) * (1.0 - dist) + vec3(1., 1., 0.0) * dist;
          color.a = 1.;
        }
        bottomLeft = vec2(-0.7, 1.75 - f);
        topRight = vec2(-0.5, 2.0 - f);
        if (
          insideAABB(vUv, bottomLeft, topRight)
        ) {
          float center = (topRight.y + bottomLeft.y) / 2.;
          float dist = clamp(vUv.y - (center - 0.1), 0., 1.);
          color.rgb = vec3(0., 1., 0.) * (1.0 - dist) + vec3(1., 1., 0.) * dist;
          color.a = 1.;
        } 
      }

      {
        // heading
        float f = mod(iTime * timeFactor, animTime);
        if (f > 0.99)
        {
          f = min(1.99, f);
          vec2 bottomLeft = vec2(1.0 + 0.99 - f, 0.1);
          vec2 topRight = vec2(1.35 + 0.99 - f, 0.175);
          if (
            insideAABB(vUv, bottomLeft, topRight)
          ) {
            color.r = 1.;
            color.a = 1.;
          }
        }
      }

      {
        // sub-heading
        float f = mod(iTime * timeFactor, animTime);
        if (f > 1.99)
        {
          f = min(2.99, f);
          vec2 bottomLeft = vec2(1.0 + 1.99 - f, 0.025);
          vec2 topRight = vec2(1.27 + 1.99 - f, 0.075);
          if (
            insideAABB(vUv, bottomLeft, topRight)
          ) {
            color.r = 1.;
            color.a = 1.;
          }
        }
      }

      {
        #define NUM_ARROWS 7
        float width = 0.015;
        float height = 0.1;
        vec2 pos = vec2(-0.6, 1.92);
        vec2 distance = vec2(0.0, 0.07);
        vec3 arrowColor = vec3(1.0, 1.0, 1.0);

        for(int i = 0; i < NUM_ARROWS; i++) {
          color = createArrow(pos, width, height, arrowColor, color);
          pos -= distance;
        }
      }
      
      gl_FragColor = vec4(color);
    }
  `,
  transparent: true,
  // depthTest: true,
  // polygonOffset: true,
  // polygonOffsetFactor: -1,
  // polygonOffsetUnits: 1,
}
